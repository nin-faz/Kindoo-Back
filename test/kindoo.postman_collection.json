{
	"info": {
		"_postman_id": "1fdf77ee-961e-4fc7-8e8f-aa0a7ba889af",
		"name": "Kindoo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30343096"
	},
	"item": [
		{
			"name": "createUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const v_res = pm.response.json();\r",
							"\r",
							"pm.test(\"‚úÖ Statut HTTP 200 - Cr√©ation des utilisateurs\", () => {\r",
							"  if (pm.response.code !== 200) {\r",
							"    console.error(\"‚ùå Erreur HTTP :\", pm.response.code);\r",
							"  }\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"if (v_res.data) {\r",
							"  pm.environment.set(\"userA_id\", v_res.data.user1.id);\r",
							"  pm.environment.set(\"userB_id\", v_res.data.user2.id);\r",
							"\r",
							"  console.log(\"‚úÖ Utilisateurs cr√©√©s et IDs stock√©s :\", {\r",
							"    userA: v_res.data.user1.id,\r",
							"    userB: v_res.data.user2.id,\r",
							"  });\r",
							"} else {\r",
							"  console.warn(\"‚ö†Ô∏è R√©ponse invalide ou erreur de cr√©ation d'utilisateur.\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation CreateTwoUsers($userA: CreateUserInput!, $userB: CreateUserInput!) {\r\n  user1: createUser(createUserInput: $userA) {\r\n    id\r\n    userName\r\n  }\r\n  user2: createUser(createUserInput: $userB) {\r\n    id\r\n    userName\r\n  }\r\n}\r\n",
						"variables": "{\r\n  \"userA\": {\r\n    \"userName\": \"UserA\",\r\n    \"password\": \"1234\"\r\n  },\r\n  \"userB\": {\r\n    \"userName\": \"UserB\",\r\n    \"password\": \"5678\"\r\n  }\r\n}\r\n"
					}
				},
				"url": {
					"raw": "https://kindoo-back.onrender.com/graphql",
					"protocol": "https",
					"host": [
						"kindoo-back",
						"onrender",
						"com"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "createConv",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const v_res = pm.response.json();\r",
							"\r",
							"pm.test(\"üì¶Ô∏è Cr√©ation conversation\", () => {\r",
							"  if (pm.response.code !== 200) {\r",
							"    console.error(\"‚ùå Erreur HTTP :\", pm.response.code);\r",
							"  }\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"if (v_res.data && v_res.data.createConversation) {\r",
							"  pm.environment.set(\"conversation_id\", v_res.data.createConversation.id);\r",
							"  console.log(\"‚úÖ Conversation cr√©√©e avec ID :\", v_res.data.createConversation.id);\r",
							"} else {\r",
							"  console.warn(\"‚ö†Ô∏è √âchec cr√©ation conversation\", v_res.errors);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation CreateConversation($input: CreateConversationInput!) {\r\n  createConversation(p_createConversationInput: $input) {\r\n    id\r\n    createdAt\r\n    participants {\r\n      id\r\n      userName\r\n    }\r\n  }\r\n}\r\n",
						"variables": "{\r\n  \"input\": {\r\n    \"participantIds\": [\"{{userA_id}}\", \"{{userB_id}}\"]\r\n  }\r\n}\r\n"
					}
				},
				"url": {
					"raw": "https://kindoo-back.onrender.com/graphql",
					"protocol": "https",
					"host": [
						"kindoo-back",
						"onrender",
						"com"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "SendMessageA",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const v_res = pm.response.json();\r",
							"\r",
							"pm.test(\"üü® Envoi message UserA\", () => {\r",
							"  if (pm.response.code !== 200) {\r",
							"    console.error(\"‚ùå Erreur HTTP :\", pm.response.code);\r",
							"  }\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"if (v_res.data && v_res.data.sendMessage) {\r",
							"  console.log(\"‚úÖ Message envoy√© par UserA :\", v_res.data.sendMessage);\r",
							"} else {\r",
							"  console.warn(\"‚ö†Ô∏è √âchec d‚Äôenvoi UserA\", v_res.errors);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation SendMessage($input: CreateMessageInput!) {\r\n  sendMessage(createMessageInput: $input) {\r\n    content\r\n    authorId\r\n    conversationId\r\n    createdAt\r\n  }\r\n}\r\n",
						"variables": "{\r\n  \"input\": {\r\n    \"content\": \"Salut Bob üëã\",\r\n    \"authorId\": \"{{userA_id}}\",\r\n    \"conversationId\": \"{{conversation_id}}\"\r\n  }\r\n}\r\n"
					}
				},
				"url": {
					"raw": "https://kindoo-back.onrender.com/graphql",
					"protocol": "https",
					"host": [
						"kindoo-back",
						"onrender",
						"com"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "SendMessageB",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const v_res = pm.response.json();\r",
							"\r",
							"pm.test(\"üüß Envoi message UserB\", () => {\r",
							"  if (pm.response.code !== 200) {\r",
							"    console.error(\"‚ùå Erreur HTTP :\", pm.response.code);\r",
							"  }\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"if (v_res.data && v_res.data.sendMessage) {\r",
							"  console.log(\"‚úÖ Message envoy√© par UserB :\", v_res.data.sendMessage);\r",
							"} else {\r",
							"  console.warn(\"‚ö†Ô∏è √âchec d‚Äôenvoi UserB\", v_res.errors);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation SendMessage($input: CreateMessageInput!) {\r\n  sendMessage(createMessageInput: $input) {\r\n    content\r\n    authorId\r\n    conversationId\r\n    createdAt\r\n  }\r\n}\r\n",
						"variables": "{\r\n  \"input\": {\r\n    \"content\": \"Salut Alice üëã\",\r\n    \"authorId\": \"{{userB_id}}\",\r\n    \"conversationId\": \"{{conversation_id}}\"\r\n  }\r\n}\r\n"
					}
				},
				"url": {
					"raw": "https://kindoo-back.onrender.com/graphql",
					"protocol": "https",
					"host": [
						"kindoo-back",
						"onrender",
						"com"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetConversationID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const v_res = pm.response.json();\r",
							"\r",
							"pm.test(\"üü´ R√©cup√©ration messages conversation\", () => {\r",
							"  if (pm.response.code !== 200) {\r",
							"    console.error(\"‚ùå Erreur HTTP :\", pm.response.code);\r",
							"  }\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"if (v_res.data && v_res.data.getByConversationId.length > 0) {\r",
							"  console.log(\"‚úÖ Messages r√©cup√©r√©s :\", v_res.data.getByConversationId.length);\r",
							"} else {\r",
							"  console.warn(\"‚ö†Ô∏è Aucun message trouv√© ou erreur.\", v_res.errors);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetMessages($conversationId: String!) {\r\n  getByConversationId(conversationId: $conversationId) {\r\n    id\r\n    content\r\n    authorId\r\n    createdAt\r\n  }\r\n}\r\n",
						"variables": "{\r\n  \"conversationId\": \"{{conversation_id}}\"\r\n}\r\n"
					}
				},
				"url": {
					"raw": "https://kindoo-back.onrender.com/graphql",
					"protocol": "https",
					"host": [
						"kindoo-back",
						"onrender",
						"com"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "FindParticipant",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const v_res = pm.response.json();\r",
							"\r",
							"pm.test(\"üü™ Recherche conversations utilisateur\", () => {\r",
							"  if (pm.response.code !== 200) {\r",
							"    console.error(\"‚ùå Erreur HTTP :\", pm.response.code);\r",
							"  }\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"if (v_res.data && v_res.data.findByParticipantId.length > 0) {\r",
							"  console.log(\"‚úÖ Conversations trouv√©es :\", v_res.data.findByParticipantId.length);\r",
							"  pm.environment.set(\"conversation_id\", v_res.data.findByParticipantId[0].id);\r",
							"} else {\r",
							"  console.warn(\"‚ö†Ô∏è Aucune conversation trouv√©e ou erreur.\", v_res.errors);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query FindByParticipant($participantId: String!) {\r\n  findByParticipantId(p_participantId: $participantId) {\r\n    id\r\n    createdAt\r\n    participants {\r\n      userName\r\n    }\r\n  }\r\n}\r\n",
						"variables": "{\r\n  \"participantId\": \"{{userA_id}}\"\r\n}\r\n"
					}
				},
				"url": {
					"raw": "https://kindoo-back.onrender.com/graphql",
					"protocol": "https",
					"host": [
						"kindoo-back",
						"onrender",
						"com"
					],
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		}
	]
}